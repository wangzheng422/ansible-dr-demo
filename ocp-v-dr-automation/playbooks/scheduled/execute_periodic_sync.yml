---
- name: Execute Periodic Storage Sync
  hosts: localhost
  gather_facts: false

  tasks:
    - name: "Get all PersistentVolumeClaims from target namespaces"
      kubernetes.core.k8s_info:
        host: "{{ ocp_primary_api_server }}"
        api_key: "{{ ocp_primary_api_key }}"
        validate_certs: false
        api_version: v1
        kind: PersistentVolumeClaim
        namespace: "{{ item }}"
      loop: "{{ target_namespaces }}"
      register: pvc_results

    - name: "Flatten the list of PVCs"
      ansible.builtin.set_fact:
        all_pvcs: "{{ pvc_results.results | map(attribute='resources') | flatten }}"

    - name: "Get all PersistentVolumes from Primary OCP"
      kubernetes.core.k8s_info:
        host: "{{ ocp_primary_api_server }}"
        api_key: "{{ ocp_primary_api_key }}"
        validate_certs: false
        api_version: v1
        kind: PersistentVolume
      register: all_pvs

    - name: "Get all VolumeSnapshots from target namespaces"
      kubernetes.core.k8s_info:
        host: "{{ ocp_primary_api_server }}"
        api_key: "{{ ocp_primary_api_key }}"
        validate_certs: false
        api_version: snapshot.storage.k8s.io/v1
        kind: VolumeSnapshot
        namespace: "{{ item }}"
      loop: "{{ target_namespaces }}"
      register: vs_results

    - name: "Flatten the list of VolumeSnapshots"
      ansible.builtin.set_fact:
        all_snapshots: "{{ vs_results.results | map(attribute='resources') | flatten }}"

    - name: "Get all VolumeSnapshotContents from Primary OCP"
      kubernetes.core.k8s_info:
        host: "{{ ocp_primary_api_server }}"
        api_key: "{{ ocp_primary_api_key }}"
        validate_certs: false
        api_version: snapshot.storage.k8s.io/v1
        kind: VolumeSnapshotContent
      register: all_vscs

    - name: "Loop through each PVC and sync its PV"
      ansible.builtin.include_role:
        name: periodic_storage_sync
      vars:
        pvc_object: "{{ item }}"
        # Find the PV that is bound to this PVC
        pv_object: "{{ all_pvs.resources | selectattr('metadata.name', 'equalto', item.spec.volumeName) | first }}"
      loop: "{{ all_pvcs }}"
      loop_control:
        label: "{{ item.metadata.namespace }}/{{ item.metadata.name }}"
      when: item.spec.volumeName is defined

    - name: "Loop through each VolumeSnapshot and sync its Content"
      ansible.builtin.include_role:
        name: periodic_storage_sync
      vars:
        snapshot_object: "{{ item }}"
        # Find the VSC that is bound to this VolumeSnapshot
        content_object: "{{ all_vscs.resources | selectattr('metadata.name', 'equalto', item.status.boundVolumeSnapshotContentName) | first }}"
      loop: "{{ all_snapshots }}"
      loop_control:
        label: "{{ item.metadata.namespace }}/{{ item.metadata.name }}"
      when: item.status is defined and item.status.boundVolumeSnapshotContentName is defined and item.status.readyToUse | default(false)

    - name: "-------------------- Cleanup DR Site --------------------"
      ansible.builtin.debug:
        msg: "Starting cleanup of stale resources on the DR site."

    # Get resources from DR site
    - name: "Get all PersistentVolumeClaims from DR site target namespaces"
      kubernetes.core.k8s_info:
        host: "{{ ocp_dr_api_server }}"
        api_key: "{{ ocp_dr_api_key }}"
        validate_certs: false
        api_version: v1
        kind: PersistentVolumeClaim
        namespace: "{{ item }}"
      loop: "{{ target_namespaces }}"
      register: dr_pvc_results

    - name: "Flatten the list of DR PVCs"
      ansible.builtin.set_fact:
        dr_all_pvcs: "{{ dr_pvc_results.results | map(attribute='resources') | flatten }}"

    - name: "Get all PersistentVolumes from DR site"
      kubernetes.core.k8s_info:
        host: "{{ ocp_dr_api_server }}"
        api_key: "{{ ocp_dr_api_key }}"
        validate_certs: false
        api_version: v1
        kind: PersistentVolume
      register: dr_all_pvs

    # Create lists of names from the primary site for easier comparison
    - name: "Create a list of primary PVC names"
      ansible.builtin.set_fact:
        primary_pvc_names: "{{ all_pvcs | map(attribute='metadata.name') | list }}"

    - name: "Create a list of primary PV names"
      ansible.builtin.set_fact:
        primary_pv_names: "{{ all_pvs.resources | map(attribute='metadata.name') | list }}"

    - name: "Get all VolumeSnapshots from DR site target namespaces"
      kubernetes.core.k8s_info:
        host: "{{ ocp_dr_api_server }}"
        api_key: "{{ ocp_dr_api_key }}"
        validate_certs: false
        api_version: snapshot.storage.k8s.io/v1
        kind: VolumeSnapshot
        namespace: "{{ item }}"
      loop: "{{ target_namespaces }}"
      register: dr_vs_results

    - name: "Flatten the list of DR VolumeSnapshots"
      ansible.builtin.set_fact:
        dr_all_snapshots: "{{ dr_vs_results.results | map(attribute='resources') | flatten }}"

    - name: "Get all VolumeSnapshotContents from DR site"
      kubernetes.core.k8s_info:
        host: "{{ ocp_dr_api_server }}"
        api_key: "{{ ocp_dr_api_key }}"
        validate_certs: false
        api_version: snapshot.storage.k8s.io/v1
        kind: VolumeSnapshotContent
      register: dr_all_vscs

    - name: "Create a list of primary VolumeSnapshot names"
      ansible.builtin.set_fact:
        primary_snapshot_names: "{{ all_snapshots | map(attribute='metadata.name') | list }}"

    - name: "Create a list of primary VolumeSnapshotContent names"
      ansible.builtin.set_fact:
        primary_vsc_names: "{{ all_vscs.resources | map(attribute='metadata.name') | list }}"

    # Compare and delete stale resources on DR site
    - name: "Delete stale PVCs from DR site"
      kubernetes.core.k8s:
        host: "{{ ocp_dr_api_server }}"
        api_key: "{{ ocp_dr_api_key }}"
        validate_certs: false
        state: absent
        api_version: v1
        kind: PersistentVolumeClaim
        name: "{{ item.metadata.name }}"
        namespace: "{{ item.metadata.namespace }}"
      loop: "{{ dr_all_pvcs }}"
      loop_control:
        label: "PVC {{ item.metadata.namespace }}/{{ item.metadata.name }}"
      when: item.metadata.name not in primary_pvc_names

    - name: "Delete stale PVs from DR site"
      kubernetes.core.k8s:
        host: "{{ ocp_dr_api_server }}"
        api_key: "{{ ocp_dr_api_key }}"
        validate_certs: false
        state: absent
        api_version: v1
        kind: PersistentVolume
        name: "{{ item.metadata.name }}"
      loop: "{{ dr_all_pvs.resources }}"
      loop_control:
        label: "PV {{ item.metadata.name }}"
      when: item.metadata.name not in primary_pv_names

    - name: "Delete stale VolumeSnapshots from DR site"
      kubernetes.core.k8s:
        host: "{{ ocp_dr_api_server }}"
        api_key: "{{ ocp_dr_api_key }}"
        validate_certs: false
        state: absent
        api_version: snapshot.storage.k8s.io/v1
        kind: VolumeSnapshot
        name: "{{ item.metadata.name }}"
        namespace: "{{ item.metadata.namespace }}"
      loop: "{{ dr_all_snapshots }}"
      loop_control:
        label: "VS {{ item.metadata.namespace }}/{{ item.metadata.name }}"
      when: item.metadata.name not in primary_snapshot_names

    - name: "Delete stale VolumeSnapshotContents from DR site"
      kubernetes.core.k8s:
        host: "{{ ocp_dr_api_server }}"
        api_key: "{{ ocp_dr_api_key }}"
        validate_certs: false
        state: absent
        api_version: snapshot.storage.k8s.io/v1
        kind: VolumeSnapshotContent
        name: "{{ item.metadata.name }}"
      loop: "{{ dr_all_vscs.resources }}"
      loop_control:
        label: "VSC {{ item.metadata.name }}"
      when: item.metadata.name not in primary_vsc_names

    - name: "Generate Sync Report"
      ansible.builtin.debug:
        msg: "Periodic sync completed. Synced {{ all_pvcs | length }} PVCs and {{ all_snapshots | length }} snapshots from namespaces [{{ target_namespaces | join(', ') }}]. Cleanup of DR site is also finished."
